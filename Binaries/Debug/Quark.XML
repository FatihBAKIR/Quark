<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Quark</name>
    </assembly>
    <members>
        <member name="E:Quark.Targetable.QuarkCollision">
            <summary>
            This event is raised when this Character collides with another Targetable
            </summary>
        </member>
        <member name="M:Quark.Targeting.TargetMacro.Run">
            <summary>
            Begins the targeting procedure for this macro
            </summary>
        </member>
        <member name="M:Quark.Targeting.TargetMacro.Cancel">
            <summary>
            Cancels the target selection
            </summary>
        </member>
        <member name="M:Quark.Targeting.TargetMacro.OnTargetSelected(Quark.Character)">
            <summary>
            On Target Selection
            </summary>
            <param name="target">Selected target</param>
        </member>
        <member name="E:Quark.Targeting.TargetMacro.TargetingSuccess">
            <summary>
            On targeting succession
            </summary>
        </member>
        <member name="E:Quark.Targeting.TargetMacro.TargetingFailed">
            <summary>
            On targeting failure
            </summary>
        </member>
        <member name="E:Quark.Targeting.TargetMacro.TargetSelected">
            <summary>
            On a Targetable object selection
            </summary>
        </member>
        <member name="E:Quark.Targeting.TargetMacro.CharacterSelected">
            <summary>
            On a Characater object selection
            </summary>
        </member>
        <member name="E:Quark.Targeting.TargetMacro.PointSelected">
            <summary>
            On a Point selection
            </summary>
        </member>
        <member name="F:Quark.Targeting.TargetingError.Cancelled">
            <summary>
            User cancelled targeting
            </summary>
        </member>
        <member name="F:Quark.Targeting.TargetingError.Interrupted">
            <summary>
            Targeting got interrupted
            </summary>
        </member>
        <member name="F:Quark.Targeting.TargetingError.NotFound">
            <summary>
            No viable target was found
            </summary>
        </member>
        <member name="M:Quark.Utilities.Utils.AlignVector(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Aligns a vector in the given direction
            </summary>
            <param name="vector">Vector to align</param>
            <param name="align">Direction</param>
            <returns>Aligned vector</returns>
        </member>
        <member name="M:Quark.Utilities.Utils.Distance2(UnityEngine.Vector3,UnityEngine.Vector3,Quark.Utilities.Planes)">
            <summary>
            Calculates the distance between two points
            </summary>
            <param name="v1">First point</param>
            <param name="v2">Second point</param>
            <param name="plane">The plane this function should work on (default XZ)</param>
            <returns>Calculated distance</returns>
        </member>
        <member name="M:Quark.Utilities.Utils.Angle2(UnityEngine.Vector3,UnityEngine.Vector3,Quark.Utilities.Planes)">
            <summary>
            Returns the angle between 2 points in degrees using cross product
            </summary>
            <param name="v1">First Point</param>
            <param name="v2">Second Point</param>
            <param name="plane">The plane this function should work on (default XZ)</param>
            <returns>Angle between them in degrees</returns>
        </member>
        <member name="M:Quark.Utilities.Utils.Slope2(UnityEngine.Vector3,UnityEngine.Vector3,Quark.Utilities.Planes)">
            <summary>
            Returns the slope in degrees from a vector to another 
            </summary>
            <param name="v1">First point</param>
            <param name="v2">Second point</param>
            <param name="plane">The plane this function should work on (default XZ)</param>
            <returns>Slope from the first point to the other in degrees</returns>
        </member>
        <member name="F:Quark.Attributes.Attribute._collection">
            <summary>
            The attribute collection which this attribute is hold in.
            </summary>
        </member>
        <member name="F:Quark.Attributes.Attribute._interactions">
            <summary>
            Other attribute interactions are held in this list.
            </summary>
        </member>
        <member name="M:Quark.Attributes.Attribute.#ctor(System.String,System.String,Quark.Attributes.AttributeCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Quark.Attributes.Attribute"/> class.
            </summary>
            <param name="tag">
            Tag.
            </param>
            <param name="name">
            Name.
            </param>
            <param name="collection">
            The attribute collection which this attribute should be held in.
            </param>
        </member>
        <member name="M:Quark.Attributes.Attribute.SetBase(System.Single)">
            <summary>
            Sets the multiplier with the null attribute for this attribute.
            </summary>
            <param name='Base'>
            Base value.
            </param>
        </member>
        <member name="M:Quark.Attributes.Attribute.AddInteraction(System.String,System.Single)">
            <summary>
            Adds an attribute interaction to this attribute.
            </summary>
            <param name='tag'>
            Tag of the other related attribute.
            </param>
            <param name='multiplier'>
            The amoubt that will be multiplied with the value of the related attribute on calculation.
            </param>
        </member>
        <member name="M:Quark.Attributes.Attribute.SetInteractions(Quark.Interaction)">
            
        </member>
        <member name="P:Quark.Attributes.Attribute.Owner">
            <summary>
            Gets the owner of this attribute.
            </summary>
            <value>The owner.</value>
        </member>
        <member name="P:Quark.Attributes.Attribute.Interactions">
            <summary>
            Gets the interactions.
            </summary>
            <value>
            The interactions.
            </value>
        </member>
        <member name="P:Quark.Attributes.Attribute.Name">
            <summary>
            Gets the name of this attribute.
            </summary>
            <value>
            The name of this attribute.
            </value>
        </member>
        <member name="P:Quark.Attributes.Attribute.Tag">
            <summary>
            Gets the tag of this attribute.
            </summary>
            <value>
            The tag of this attribute.
            </value>
        </member>
        <member name="P:Quark.Attributes.Attribute.Value">
            <summary>
            Gets the calculated value of this attribute
            </summary>
            <value>
            The value this attribute has.
            </value>
        </member>
        <member name="T:Quark.Projectiles.Projectile">
            <summary>
            Projectile class provides interface for MissileController objects to access to properties about the projectile
            It also retrieves necessary movement vector or position vector and moves the carrier object appropriately
            It is also responsible for handling the collisions and target checks
            </summary>
        </member>
        <member name="F:Quark.Projectiles.Projectile.NearEnough">
            <summary>
            The near enough distance constant which indicates that a missile will consider itself reached to a target point
            </summary>
        </member>
        <member name="P:Quark.Projectiles.Projectile.HitCount">
            <summary>
            This property denotes the total hit count of this Spell Cast
            </summary>
        </member>
        <member name="P:Quark.Projectiles.Projectile.InitPosition">
            <summary>
            Gets the initial position for this missile.
            </summary>
            <value>The initial position.</value>
        </member>
        <member name="M:Quark.Projectiles.ProjectileController.Control">
            <summary>
            Controls the missile object's position
            </summary>
        </member>
        <member name="P:Quark.Projectiles.ProjectileController.Type">
            <summary>
            Gets the position update type for the missile
            </summary>
            <value>Update type.</value>
        </member>
        <member name="P:Quark.Projectiles.ProjectileController.Movement">
            <summary>
            Calculates the movement vector for current frame
            </summary>
            <value>The movement vector</value>
        </member>
        <member name="P:Quark.Projectiles.ProjectileController.Position">
            <summary>
            Calculates the position chance
            </summary>
            <value>The position difference from the initial position</value>
        </member>
        <member name="P:Quark.Projectiles.ProjectileController.MyPos">
            <summary>
            Gets current missile position
            </summary>
            <value>My position.</value>
        </member>
        <member name="P:Quark.Projectiles.ProjectileController.Target">
            <summary>
            Gets the target position of the missile
            </summary>
            <value>The target.</value>
        </member>
        <member name="P:Quark.Projectiles.ProjectileController.InitialPosition">
            <summary>
            Gets the initial position of the missile
            </summary>
            <value>The initial position.</value>
        </member>
        <member name="P:Quark.Projectiles.ProjectileController.Alive">
            <summary>
            Gets the time in seconds since the missile was created
            </summary>
            <value>The alive.</value>
        </member>
        <member name="P:Quark.Projectiles.ProjectileController.Distance">
            <summary>
            Gets the distance from the beginning position to the current missile position 
            </summary>
            <value>The distance.</value>
        </member>
        <member name="F:Quark.Buffs.Buff.MaxStacks">
            <summary>
            This field stores the maximum stack count of this Buff.
            </summary>
        </member>
        <member name="F:Quark.Buffs.Buff.CurrentStacks">
            <summary>
            This field stores the current stack count of this Buff.
            </summary>
        </member>
        <member name="F:Quark.Buffs.Buff.StackBehavior">
            <summary>
            This field stores the stacking behavior of this Buff.
            See <see cref="T:Quark.Buffs.StackBehavior"/>
            </summary>
        </member>
        <member name="M:Quark.Buffs.Buff.MakeID(Quark.Buffs.Buff,Quark.Spells.Cast)">
            <summary>
            Makes an Identifier from a Buff and Cast instances
            </summary>
            <param name="buff">The Buff instance</param>
            <param name="context">The Cast instance</param>
            <returns>Buff identifier</returns>
        </member>
        <member name="M:Quark.Buffs.Buff.MakeID(Quark.Buffs.Buff,System.String)">
            <summary>
            Makes an Identifier from a Buff and an identifier for a Cast context
            </summary>
            <param name="buff">The Buff instance</param>
            <param name="contextID">A context identifier</param>
            <returns>Buff identifier</returns>
        </member>
        <member name="M:Quark.Buffs.Buff.SetContext(Quark.Spells.Cast)">
            <summary>
            Sets the Cast context where this Buff runs in
            </summary>
            <param name="context">The Cast context</param>
        </member>
        <member name="F:Quark.Buffs.Buff._posessionTime">
            <summary>
            This variable is stored for calculating the alive time of the Buff instances
            </summary>
        </member>
        <member name="F:Quark.Buffs.Buff._lastTick">
            <summary>
            This variable is stored for checking whether the Tick method should be called or not in a given frame
            </summary>
        </member>
        <member name="F:Quark.Buffs.Buff._terminated">
            <summary>
            This flag stores whether this Buff got terminated in the last Tick
            </summary>
        </member>
        <member name="M:Quark.Buffs.Buff.Terminate">
            <summary>
            Immediately terminates this Buff.
            Termination assures no other Tick will take place in this instance.
            </summary>
        </member>
        <member name="M:Quark.Buffs.Buff.ResetBeginning">
            <summary>
            Resets the possession time of this Buff, practically resetting its lifetime
            </summary>
        </member>
        <member name="M:Quark.Buffs.Buff.Tick">
            <summary>
            This function controls the state of the buff for whether it should call the OnTick function in this frame or not and also it checks if it has completed its lifespan or not
            </summary>
        </member>
        <member name="M:Quark.Buffs.Buff.Register">
            <summary>
            Register proper events to the Messenger.
            This method should <b>not</b> contain any gameplay related logic
            Refer to the <c>OnPossess()</c> for gameplay logic on possession
            </summary>
        </member>
        <member name="M:Quark.Buffs.Buff.Deregister">
            <summary>
            Deregister pre registered events from the messenger.
            </summary>
        </member>
        <member name="M:Quark.Buffs.Buff.Possess(Quark.Character)">
            <summary>
            Begin the posession logic of this Buff
            </summary>
            <param name="possessor"></param>
        </member>
        <member name="M:Quark.Buffs.Buff.OnPossess">
            <summary>
            This event handler is called right after the owning <c>BuffContainer</c> possesses this buff
            </summary>
        </member>
        <member name="M:Quark.Buffs.Buff.OnStack">
            <summary>
            This event is raised when an existing Buff is attached again
            </summary>
        </member>
        <member name="M:Quark.Buffs.Buff.OnTick">
            <summary>
            Handles the tick event
            </summary>
        </member>
        <member name="M:Quark.Buffs.Buff.OnDone">
            <summary>
            Executes the finalization logic of this buff
            </summary>
        </member>
        <member name="M:Quark.Buffs.Buff.OnTerminate">
            <summary>
            Executes the termination logic of this buff
            </summary>
        </member>
        <member name="P:Quark.Buffs.Buff.Name">
            <summary>
            Name of this Buff.
            </summary>
        </member>
        <member name="P:Quark.Buffs.Buff.Identifier">
            <summary>
            Returns this Buffs identifier
            </summary>
        </member>
        <member name="P:Quark.Buffs.Buff.LifeRatio">
            <summary>
            This ratio indicates the rate of its alive time to its total duration 
            </summary>
        </member>
        <member name="P:Quark.Buffs.Buff.Alive">
            <summary>
            The time span in seconds where this Buff was running 
            </summary>
        </member>
        <member name="P:Quark.Buffs.Buff.CleanedUp">
            <summary>
            This flag stores whether this Buff is ready to be garbage collected
            </summary>
        </member>
        <member name="P:Quark.Buffs.Buff.PossessEffects">
            <summary>
            These effects are applied when this Buff is first possessed
            </summary>
        </member>
        <member name="P:Quark.Buffs.Buff.StackEffects">
            <summary>
            These effects are applied when another instance of this Buff is attached to the possessor
            </summary>
        </member>
        <member name="P:Quark.Buffs.Buff.TickEffects">
            <summary>
            These effects are applied on every interval
            </summary>
        </member>
        <member name="P:Quark.Buffs.Buff.DoneEffects">
            <summary>
            These effects are applied when this Buff finishes its life time successfully
            </summary>
        </member>
        <member name="P:Quark.Buffs.Buff.TerminateEffects">
            <summary>
            These effeccts are applied when this Buff terminates (fails finish its life time)
            </summary>
        </member>
        <member name="P:Quark.Buffs.Buff.DoneConditions">
            <summary>
            These conditions are checked to determine whether this Buff should be done
            </summary>
        </member>
        <member name="P:Quark.Buffs.Buff.TerminateConditions">
            <summary>
            These conditions are checked to determine whether this Buff should terminate
            </summary>
        </member>
        <member name="T:Quark.Buffs.StackBehavior">
            <summary>
            This enumeration dictates how a given Buff should respond in a stacking situation
            </summary>
        </member>
        <member name="F:Quark.Buffs.StackBehavior.ResetBeginning">
            <summary>
            In the case of stacking, the Buff should reset its possession time.
            <see cref="M:Quark.Buffs.Buff.ResetBeginning"/>
            </summary>
        </member>
        <member name="F:Quark.Buffs.StackBehavior.IncreaseStacks">
            <summary>
            In the case of stacking, the Buff should increase its stack count.
            </summary>
        </member>
        <member name="F:Quark.Buffs.StackBehavior.Nothing">
            <summary>
            In the case of stacking, the Buff shouldn't respond.
            </summary>
        </member>
        <member name="M:Quark.Spells.Spell.SetContext(Quark.Spells.Cast)">
            <summary>
            Introduce the Cast context which is invoking this Spell instance.
            </summary>
            <param name="context">The Cast</param>
        </member>
        <member name="M:Quark.Spells.Spell.OnInvoke">
            <summary>
            Executes the spell cast beginning logic.
            </summary>
        </member>
        <member name="M:Quark.Spells.Spell.OnTargetingDone">
            <summary>
            Executes the spell targeting done logic.
            </summary>
        </member>
        <member name="M:Quark.Spells.Spell.OnCastingBegan">
            <summary>
            
            </summary>
        </member>
        <member name="M:Quark.Spells.Spell.OnCastDone">
            <summary>
            
            </summary>
        </member>
        <member name="M:Quark.Spells.Spell.OnTravel(UnityEngine.Vector3)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Quark.Spells.Spell.OnHit(UnityEngine.Vector3)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Quark.Spells.Spell.OnHit(Quark.Character)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Quark.Spells.Spell.OnHit(Quark.Targetable)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Quark.Spells.Spell.OnMiss">
            <summary>
            
            </summary>
        </member>
        <member name="M:Quark.Spells.Spell.OnFinal">
            <summary>
            Executes the ClearEffects then purges itself from the Cast context it is associated with
            </summary>
        </member>
        <member name="M:Quark.Spells.Spell.CollectProjectile(Quark.Projectiles.Projectile)">
            <summary>
            Collects a projectile which were created by this spell
            </summary>
            <param name="projectile">Projectile to collect.</param>
        </member>
        <member name="M:Quark.Spells.Spell.CreateProjectiles">
            <summary>
            Invokes necessary projectiles for this spell
            </summary>
        </member>
        <member name="P:Quark.Spells.Spell.CastDuration">
            <summary>
            Gets or Sets the duration of the cast.
            </summary>
            <value>
            The duration of the cast.
            </value>
        </member>
        <member name="P:Quark.Spells.Spell.CastingInterval">
            <summary>
            This field determines the interval of the OnCasting logic to run while this Spell is being casted.
            </summary>
            <value>
            Interval in seconds.
            </value>
        </member>
        <member name="P:Quark.Spells.Spell.TravelingInterval">
            <summary>
            This field determines the interval of the OnTravel logic to run while a projectile belonging to this Spell is   traveling.
            </summary>
            <value>
            Interval in distance units.
            </value> 
        </member>
        <member name="P:Quark.Spells.Spell.Name">
            <summary>
            Name of the Spell
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Quark.Spells.Spell.TargetForm">
            <summary>
            Gets the target form of this spell
            </summary>
            <value>The target form.</value>
        </member>
        <member name="P:Quark.Spells.Spell.TargetMacro">
            <summary>
            Gets the target macro of this Spell
            </summary>
            <value>The target macro.</value>
        </member>
        <member name="P:Quark.Spells.Spell.IsInstant">
            <summary>
            Gets a value indicating whether this spell is instant.
            </summary>
            <value><c>true</c> if this spell is instant; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Quark.Spells.Spell.IsProjectiled">
            <summary>
            Gets a value indicating whether this spell invokes projectiles.
            </summary>
            <value><c>true</c> if this instance has projectiles; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Quark.Spells.Spell.InvokeEffects">
            <summary>
            The begin effects.
            Effects within this list are applied with the caster Character object argument when the castdata is initialized
            </summary>
        </member>
        <member name="P:Quark.Spells.Spell.TargetingDoneEffects">
            <summary>
            The targeting done effects.
            Effects within this list are applied with each of the target Character objects and Vector objects, depending on the type of the spell
            </summary>
        </member>
        <member name="P:Quark.Spells.Spell.CastingBeginEffects">
            <summary>
            The casting began effects
            Effects within this list are applied after targeting done and casting began, these effects are not executed for instant spells
            </summary>
        </member>
        <member name="P:Quark.Spells.Spell.CastingEffects">
            <summary>
            The casting effects
            Effects within this list are applied while the casting occurs
            </summary>
        </member>
        <member name="P:Quark.Spells.Spell.CastDoneEffects">
            <summary>
            The casting done effects
            Effects within this list are applied when the casting successfully finishes
            </summary>
        </member>
        <member name="P:Quark.Spells.Spell.InterruptEffects">
            <summary>
            The interruption effects
            Effects within this list are applied if the spell gets interrupted either by the caster or other Characters
            </summary>
        </member>
        <member name="P:Quark.Spells.Spell.TravelEffects">
            <summary>
            The traveling effects
            Effects within this list are applied while the projectiles of this Spell are traveling
            </summary>
        </member>
        <member name="P:Quark.Spells.Spell.HitEffects">
            <summary>
            The on-hit effects
            Effects within this list are applied when a successful hit occurs
            </summary>
        </member>
        <member name="P:Quark.Spells.Spell.MissEffects">
            <summary>
            The spell miss effects
            Effects within this list are applied when a projectile gets destroyed without hitting any characters
            </summary>
        </member>
        <member name="P:Quark.Spells.Spell.ClearEffects">
            <summary>
            The finalizing effects
            Effects within this list are applied just before the spell gets collected by the GC
            </summary>
        </member>
        <member name="F:Quark.Targeting.TargetForm.Singular">
            <summary>
            May hit multiple characters
            </summary>
        </member>
        <member name="F:Quark.Targeting.TargetForm.Plural">
            <summary>
            May not hit multiple characters
            </summary>
        </member>
        <member name="F:Quark.Spells.Cast.HitCount">
            <summary>
            The total hit count in this context.
            </summary>
        </member>
        <member name="M:Quark.Spells.Cast.PrepareCast(Quark.Character,Quark.Spells.Spell)">
            <summary>
            Prepares a new instance of <see cref="T:Quark.Spells.Cast"/> with the specified caster and spell.
            </summary>
            <returns>
            A began CastData object.
            </returns>
            <param name="caster">
            Caster Character.
            </param>
            <param name="spell">
            The instance of the spell to be cast.
            </param>
        </member>
        <member name="M:Quark.Spells.Cast.Invoke">
            <summary>
            Begin the casting logic.
            </summary>
        </member>
        <member name="M:Quark.Spells.Cast.BeginTargeting">
            <summary>
            Begin targeting logic
            </summary>
        </member>
        <member name="M:Quark.Spells.Cast.TargetingDone(Quark.TargetCollection)">
            <summary>
            BeginTargeting done logic.
            </summary>
        </member>
        <member name="F:Quark.Spells.Cast._interrupted">
            <summary>
            This flag determines whether the current Cast instance has been interrupted or not
            </summary>
        </member>
        <member name="F:Quark.Spells.Cast._lastCast">
            <summary>
            This field stores the last time the Casting logic of the spell being casted was executed
            </summary>
        </member>
        <member name="M:Quark.Spells.Cast.Interrupt">
            <summary>
            Interrupt this Cast instance.
            </summary>
        </member>
        <member name="P:Quark.Spells.Cast.NonSpell">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Quark.Spells.Cast"/> context is Item sourced.
            </summary>
            <value><c>true</c> if non Spell; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Quark.Spells.Cast.Caster">
            <summary>
            Gets the caster.
            </summary>
            <value>
            The caster of the spell.
            </value>
        </member>
        <member name="P:Quark.Spells.Cast.CastTime">
            <summary>
            Gets the cast time.
            </summary>
            <value>
            The time past since the beginning of the cast.
            </value>
        </member>
        <member name="P:Quark.Spells.Cast.CastPercentage">
            <summary>
            Gets the cast percentage.
            </summary>
            <value>
            The cast done percentage.
            </value>
        </member>
        <member name="T:Quark.ItemCollection">
            TODO: let items carry other items in form of a bag
        </member>
        <member name="M:Quark.ItemCollection.#ctor(Quark.Character,System.Int32)">
            <summary>
            Initialize a new item container
            </summary>
        </member>
        <member name="M:Quark.ItemCollection.Add(Quark.Item)">
            <summary>
            Add a new item to this container
            </summary>
            <param name="item">The item to be added</param>
        </member>
        <member name="M:Quark.Condition.Check">
            <summary>
            Checks whether a condition is met in the context
            </summary>
        </member>
        <member name="M:Quark.Condition.Check(UnityEngine.Vector3)">
            <summary>
            Check whether a condition is met in the context with the specified point.
            </summary>
            <param name="point">The Point.</param>
        </member>
        <member name="M:Quark.Condition.Check(Quark.Character)">
            <summary>
            Check whether a condition is met in the context with the specified character.
            </summary>
            <param name="character">The Character.</param>
        </member>
        <member name="M:Quark.Condition.Check(Quark.Targetable)">
            <summary>
            Check whether a condition is met in the context with the specified target.
            </summary>
            <param name="target">The Targetable.</param>
        </member>
        <member name="M:Quark.ConditionCollection.#ctor">
            <summary>
            Initialize a new condition collection
            </summary>
        </member>
        <member name="M:Quark.ConditionCollection.Add(Quark.Condition)">
            <summary>
            Add a new condition to this collection
            </summary>
            <param name="condition">The condition to be added</param>
        </member>
        <member name="M:Quark.Effect.Apply">
            <summary>
            Applies this effect without a target.
            </summary>
        </member>
        <member name="M:Quark.Effect.Apply(Quark.Character)">
            <summary>
            Applies this effect on the specified target Character.
            </summary>
            <param name='target'>
            Target Character.
            </param>
        </member>
        <member name="M:Quark.Effect.Apply(UnityEngine.Vector3)">
            <summary>
            Applies this effect on the specified target Vector3.
            </summary>
            <param name='point'>  
            Target Point.
            </param>
        </member>
        <member name="M:Quark.Effect.Apply(Quark.Targetable)">
            <summary>
            Applies this effect on the specified non character targetable
            </summary>
            <param name="target">Targetable.</param>
        </member>
        <member name="P:Quark.Effect.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name of this effect.
            </value>
        </member>
        <member name="T:Quark.EffectCollection">
            <summary>
            This class is designed for containing, mutating and running some effects
            It is useful for storing event handling effects
            The family of Run functions return the instance itself so the running of the effects on multiple target types can be serialized like:
            Container.Run().Run(character).Run(point)... etc.
            </summary>
        </member>
        <member name="M:Quark.EffectCollection.#ctor">
            <summary>
            Initialize a new effect collection
            </summary>
        </member>
        <member name="M:Quark.EffectCollection.Add(Quark.Effect)">
            <summary>
            Add a new effect to this collection
            </summary>
            <param name="effect">The effect to be added</param>
        </member>
        <member name="M:Quark.EffectCollection.Run(Quark.Spells.Cast)">
            <summary>
            Run the effects contained in this collection with no target
            </summary>
            <param name="context">The Cast context for the Effects to run</param>
            <returns>This collection itself</returns>
        </member>
        <member name="M:Quark.EffectCollection.Run(UnityEngine.Vector3,Quark.Spells.Cast)">
            <summary>
            Apply the effects contained in this collection with a single Point target
            </summary>
            <param name="target">The target vector</param>
            <param name="context">The Cast context for the Effects to run</param>
            <returns>This collection itself</returns>
        </member>
        <member name="M:Quark.EffectCollection.Run(Quark.Character,Quark.Spells.Cast)">
            <summary>
            Apply the effects contained in this collection with a single Character target
            </summary>
            <param name="target">The target character</param>
            <param name="context">The Cast context for the Effects to run</param>
            <returns>This collection itself</returns>
        </member>
        <member name="M:Quark.EffectCollection.Run(Quark.Targetable,Quark.Spells.Cast)">
            <summary>
            Apply the effects contained in this collection with a single Targetable target
            </summary>
            <param name="target">The target targetable</param>
            <param name="context">The Cast context for the Effects to run</param>
            <returns>This collection itself</returns>
        </member>
        <member name="M:Quark.EffectCollection.Run(UnityEngine.Vector3[],Quark.Spells.Cast)">
            <summary>
            Apply the effects contained in this collection with a collection of Point targets
            </summary>
            <param name="targets">The target vectors</param>
            <param name="context">The Cast context for the Effects to run</param>
            <returns>This collection itself</returns>
        </member>
        <member name="M:Quark.EffectCollection.Run(Quark.Character[],Quark.Spells.Cast)">
            <summary>
            Apply the effects contained in this collection with a collection of Character targets
            </summary>
            <param name="targets">The target characters</param>
            <param name="context">The Cast context for the Effects to run</param>
            <returns>This collection itself</returns>
        </member>
        <member name="M:Quark.EffectCollection.Run(Quark.Targetable[],Quark.Spells.Cast)">
            <summary>
            Apply the effects contained in this collection with a collection of Targetable targets
            </summary>
            <param name="targets">The target targetables</param>
            <param name="context">The Cast context for the Effects to run</param>
            <returns>This collection itself</returns>
        </member>
        <member name="M:Quark.Character.GetBuff(Quark.Buffs.Buff)">
            <summary>
            If a buff with the given type exists on this Character, it will return the correct instance on the Character, otherwise it will return null.
            </summary>
            <returns>The buff instance being carried by this Character.</returns>
            <param name="buff">Example of the Buff to find. Only types should match.</param>
        </member>
        <member name="P:Quark.Character.Casts">
            <summary>
            Returns a read-only collection of the casts this Character is casting
            </summary>
        </member>
        <member name="P:Quark.Character.Buffs">
            <summary>
            Returns a readonly collection of the Buffs being carried by this Character
            </summary>
            <value>The buffs.</value>
        </member>
        <member name="E:Quark.Character.CharacterDestroyed">
            <summary>
            This event is raised after the Character component is destroyed
            </summary>
        </member>
        <member name="E:Quark.Character.BuffAttached">
            <summary>
            This event is raised when a new Buff is attached to this Character
            </summary>
        </member>
        <member name="E:Quark.Character.BuffDetached">
            <summary>
            This event is raised when a Buff is detached from this Character 
            </summary>
        </member>
        <member name="E:Quark.Character.StatManipulated">
            <summary>
            This event is raised when a Stat of this Character is manipulated
            </summary>
        </member>
        <member name="P:Quark.QuarkCollision.Source">
            <summary>
            The Targetable this collision was catched from
            </summary>
        </member>
        <member name="P:Quark.QuarkCollision.Other">
            <summary>
            Other Targetable
            </summary>
        </member>
        <member name="P:Quark.QuarkCollision.SourcePosition">
            <summary>
            Source Targetable's position
            </summary>
        </member>
        <member name="P:Quark.QuarkCollision.OtherPosition">
            <summary>
            Other Targetable's position
            </summary>
        </member>
        <member name="T:Quark.QuarkMain">
            <summary>
            QuarkMain is the singleton object which starts the default Quark subroutines
            </summary>
        </member>
        <member name="F:Quark.QuarkMain._headRef">
            <summary>
            A weak reference to the singleton QuarkMain object.
            It is accessed via a weak reference so that it will be garbage collected after the GameObject it is attached to is destroyed
            </summary>
        </member>
        <member name="M:Quark.QuarkMain.GetInstance">
            <summary>
            Gets the singleton QuarkMain instance.
            </summary>
            <returns>The instance</returns>
        </member>
        <member name="P:Quark.QuarkMain.Player">
            <summary>
            Gets or sets the active player Character.
            </summary>
            <value>The player.</value>
        </member>
        <member name="M:Quark.Interaction.#ctor">
            <summary>
            Initialize a new effect collection
            </summary>
        </member>
        <member name="M:Quark.Interaction.Add(Quark.Attributes.AttributeModifier)">
            <summary>
            Add a new interaction to this collection
            </summary>
            <param name="modifier">The interaction to be added</param>
        </member>
        <member name="M:Quark.Interaction.Calculate(Quark.Character)">
            <summary>
            Calculates the current value of this Interaction for a given Character
            </summary>
            <param name="of"></param>
            <returns></returns>
        </member>
        <member name="T:Quark.Symbol">
            <summary>
            This class is the building block of expressions.
            
            It can be an interaction, constant or other custom calculation such as another expression.
            </summary>
        </member>
        <member name="T:Quark.ConstantSymbol">
            <summary>
            This class represents only a constant value.
            </summary>
        </member>
        <member name="T:Quark.InteractionSymbol">
            <summary>
            This class represents an attribute interaction of a given source.
            
            It depends either on the caster or target depending on the source, 
            and the value it yields is the interaction result.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Quark.Expression" -->
        <member name="M:Quark.Expression.Add(System.Single)">
            <summary>
            Adds a constant symbol to this expression.
            </summary>
            <param name="constant">Constant.</param>
        </member>
        <member name="M:Quark.Expression.Add(Quark.Symbol)">
            <summary>
            Adds an arbitrary symbol to this expression.
            </summary>
            <param name="symbol">Symbol.</param>
        </member>
        <member name="M:Quark.Expression.Add(Quark.Source,System.String,System.Single)">
            <summary>
            Adds an attribute interaction to this expression.
            </summary>
            <param name="source">Source character.</param>
            <param name="tag">Attribute or stat tag.</param>
            <param name="multiplier">Multiplier.</param>
        </member>
        <member name="M:Quark.Expression.Execute(Quark.Character,Quark.Character)">
            <summary>
            Executes the expression and returns the calculated value.
            </summary>
            <param name="caster">Caster.</param>
            <param name="target">Target.</param>
        </member>
    </members>
</doc>
