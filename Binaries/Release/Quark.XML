<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Quark</name>
    </assembly>
    <members>
        <member name="E:Quark.Targetable.QuarkCollision">
            <summary>
            This event is raised when this Character collides with another Targetable
            </summary>
        </member>
        <member name="P:Quark.QuarkCollision.Source">
            <summary>
            The Targetable this collision was catched from
            </summary>
        </member>
        <member name="P:Quark.QuarkCollision.Other">
            <summary>
            Other Targetable
            </summary>
        </member>
        <member name="P:Quark.QuarkCollision.SourcePosition">
            <summary>
            Source Targetable's position
            </summary>
        </member>
        <member name="P:Quark.QuarkCollision.OtherPosition">
            <summary>
            Other Targetable's position
            </summary>
        </member>
        <member name="M:Quark.Targeting.TargetMacro.Run">
            <summary>
            Begins the targeting procedure for this macro
            </summary>
        </member>
        <member name="M:Quark.Targeting.TargetMacro.Cancel">
            <summary>
            Cancels the target selection
            </summary>
        </member>
        <member name="M:Quark.Targeting.TargetMacro.Clear">
            <summary>
            Clear this TargetMacro from its context.
            </summary>
        </member>
        <member name="M:Quark.Targeting.TargetMacro.SetContext(Quark.Spells.Cast,System.Boolean)">
            <summary>
            This method sets the context for this TargetMacro to run in.
            </summary>
            <param name="context">The context.</param>
            <param name="withoutCallbacks">If this flag is set, callbacks to the context will not be registered.</param>
        </member>
        <member name="M:Quark.Targeting.TargetMacro.OnTargetSelected(Quark.Character)">
            <summary>
            On Target Selection
            </summary>
            <param name="target">Selected Character</param>
        </member>
        <member name="M:Quark.Targeting.TargetMacro.OnTargetSelected(UnityEngine.Vector3)">
            <summary>
            On Target Selection
            </summary>
            <param name="target">Selected Point</param>>
        </member>
        <member name="M:Quark.Targeting.TargetMacro.OnTargetSelected(Quark.Targetable)">
            <summary>
            On Target Selection
            </summary>
            <param name="target">Selected Targetable</param>
        </member>
        <member name="M:Quark.Targeting.TargetMacro.OnTargetingSuccess">
            <summary>
            On Targeting Success
            </summary>
        </member>
        <member name="M:Quark.Targeting.TargetMacro.OnTargetingFail(Quark.Targeting.TargetingError)">
            <summary>
            On Targeting Fail
            </summary>
            <param name="error">The reason for this targeting to fail.</param>
        </member>
        <member name="E:Quark.Targeting.TargetMacro.TargetingSuccess">
            <summary>
            On targeting succession
            </summary>
        </member>
        <member name="E:Quark.Targeting.TargetMacro.TargetingFailed">
            <summary>
            On targeting failure
            </summary>
        </member>
        <member name="E:Quark.Targeting.TargetMacro.TargetSelected">
            <summary>
            On a Targetable object selection
            </summary>
        </member>
        <member name="E:Quark.Targeting.TargetMacro.CharacterSelected">
            <summary>
            On a Characater object selection
            </summary>
        </member>
        <member name="E:Quark.Targeting.TargetMacro.PointSelected">
            <summary>
            On a Point selection
            </summary>
        </member>
        <member name="P:Quark.Targeting.TargetMacro.Context">
            <summary>
            The context this TargetMacro resides in.
            </summary>
        </member>
        <member name="P:Quark.Targeting.TargetMacro.Caster">
            <summary>
            This property stores the source Character for this targeting.
            </summary>
        </member>
        <member name="T:Quark.Targeting.TargetingError">
            <summary>
            This enumeration represents the reason a targeting has failed.
            </summary>
        </member>
        <member name="F:Quark.Targeting.TargetingError.Cancelled">
            <summary>
            User cancelled targeting
            </summary>
        </member>
        <member name="F:Quark.Targeting.TargetingError.Interrupted">
            <summary>
            Targeting got interrupted
            </summary>
        </member>
        <member name="F:Quark.Targeting.TargetingError.NotFound">
            <summary>
            No viable target was found
            </summary>
        </member>
        <member name="T:Quark.Targeting.TargetForm">
            <summary>
            This enumeration represents a Spells target form.
            </summary>
        </member>
        <member name="F:Quark.Targeting.TargetForm.Singular">
            <summary>
            May hit multiple characters
            </summary>
        </member>
        <member name="F:Quark.Targeting.TargetForm.Plural">
            <summary>
            May not hit multiple characters
            </summary>
        </member>
        <member name="T:Quark.Targeting.TargetType">
            <summary>
            This enumeration represents a Targets type.
            </summary>
        </member>
        <member name="F:Quark.Targeting.TargetType.None">
            <summary>
            There is no target.
            </summary>
        </member>
        <member name="F:Quark.Targeting.TargetType.Point">
            <summary>
            Target is a Point.
            </summary>
        </member>
        <member name="F:Quark.Targeting.TargetType.Targetable">
            <summary>
            The target is a Targetable.
            </summary>
        </member>
        <member name="F:Quark.Targeting.TargetType.Character">
            <summary>
            The target is a Character
            </summary>
        </member>
        <member name="T:Quark.StatDel">
            <summary>
            This delegate is used for events related with Stats.
            </summary>
            <param name="source">Character that owns the Stat.</param>
            <param name="stat">The Stat.</param>
            <param name="change">The amount of change.</param>
        </member>
        <member name="T:Quark.BuffDel">
            <summary>
            This delegate is used for events related with Buffs.
            </summary>
            <param name="source">Character that possesses the Buff</param>
            <param name="buff">The Buff.</param>
        </member>
        <member name="T:Quark.CollisionDel">
            <summary>
            This delegate is used for events related with collisions.
            </summary>
            <param name="collision">The collision data.</param>
        </member>
        <member name="T:Quark.MacroSuccess">
            <summary>
            This delegate is used with the event of a TargetMacro success.
            </summary>
            <param name="targets">Selected targets by the macro.</param>
        </member>
        <member name="T:Quark.MacroError">
            <summary>
            This delegate is used with the event of a TargetMacro failure.
            </summary>
            <param name="error">Why the targeting has failed.</param>
        </member>
        <member name="T:Quark.CharacterDel">
            <summary>
            This delegate is used with events related with a Character.
            </summary>
            <param name="source">The Character.</param>
        </member>
        <member name="T:Quark.TargetableDel">
            <summary>
            This delegate is used with events related with a Targetable. 
            </summary>
            <param name="target">The Targetable.</param>
        </member>
        <member name="T:Quark.PointDel">
            <summary>
            This delegate is used with events related with a Point. 
            </summary>
            <param name="target">The Point.</param>>
        </member>
        <member name="T:Quark.Utilities.Planes">
            <summary>
            This enumeration is used by the 2 dimensional geometry functions 
            to determine the correct plane to work on in Quark utilities.
            </summary>
        </member>
        <member name="F:Quark.Utilities.Planes.XY">
            <summary>
            The X-Y plane.
            </summary>
        </member>
        <member name="F:Quark.Utilities.Planes.XZ">
            <summary>
            The X-Z plane.
            </summary>
        </member>
        <member name="F:Quark.Utilities.Planes.YZ">
            <summary>
            The Y-Z plane.
            </summary>
        </member>
        <member name="M:Quark.Utilities.Utils.Checkflag(System.Enum,System.Enum)">
            <summary>
            This function checks whether a value is included in a given enumeration.
            </summary>
            <param name="value">The value to check</param>
            <param name="checkfor">The value to check for</param>
            <returns></returns>
        </member>
        <member name="M:Quark.Utilities.Utils.AlignVector(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Aligns a vector in the given direction
            </summary>
            <param name="vector">Vector to align</param>
            <param name="align">Direction</param>
            <returns>Aligned vector</returns>
        </member>
        <member name="M:Quark.Utilities.Utils.VectorOnPlane(UnityEngine.Vector3,Quark.Utilities.Planes)">
            <summary>
            Sets the unnecessary component of a 3d vector to zero.
            </summary>
            <param name="vector">The vector</param>
            <param name="plane">The plane</param>
            <returns>A new vector on the given plane.</returns>
        </member>
        <member name="M:Quark.Utilities.Utils.Distance2(UnityEngine.Vector3,UnityEngine.Vector3,Quark.Utilities.Planes)">
            <summary>
            Calculates the distance between two points
            </summary>
            <param name="v1">First point</param>
            <param name="v2">Second point</param>
            <param name="plane">The plane this function should work on (default XZ)</param>
            <returns>Calculated distance</returns>
        </member>
        <member name="M:Quark.Utilities.Utils.Angle2(UnityEngine.Vector3,UnityEngine.Vector3,Quark.Utilities.Planes)">
            <summary>
            Returns the angle between 2 points in degrees using cross product
            </summary>
            <param name="v1">First Point</param>
            <param name="v2">Second Point</param>
            <param name="plane">The plane this function should work on (default XZ)</param>
            <returns>Angle between them in degrees</returns>
        </member>
        <member name="M:Quark.Utilities.Utils.Slope2(UnityEngine.Vector3,UnityEngine.Vector3,Quark.Utilities.Planes)">
            <summary>
            Returns the slope in degrees from a vector to another 
            </summary>
            <param name="v1">First point</param>
            <param name="v2">Second point</param>
            <param name="plane">The plane this function should work on (default XZ)</param>
            <returns>Slope from the first point to the other in degrees</returns>
        </member>
        <member name="F:Quark.Attributes.Attribute._collection">
            <summary>
            The attribute collection which this attribute is hold in.
            </summary>
        </member>
        <member name="F:Quark.Attributes.Attribute._interactions">
            <summary>
            Other attribute interactions are held in this list.
            </summary>
        </member>
        <member name="M:Quark.Attributes.Attribute.#ctor(System.String,System.String,Quark.Attributes.AttributeCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Quark.Attributes.Attribute"/> class.
            </summary>
            <param name="tag">
            Tag.
            </param>
            <param name="name">
            Name.
            </param>
            <param name="collection">
            The attribute collection which this attribute should be held in.
            </param>
        </member>
        <member name="M:Quark.Attributes.Attribute.SetBase(System.Single)">
            <summary>
            Sets the multiplier with the null attribute for this attribute.
            </summary>
            <param name='Base'>
            Base value.
            </param>
        </member>
        <member name="M:Quark.Attributes.Attribute.SetCollection(Quark.Attributes.AttributeCollection)">
            <summary>
            Set the AttributeCollection of this instance.
            </summary>
            <param name="collection">Collection to set to.</param>
        </member>
        <member name="M:Quark.Attributes.Attribute.AddInteraction(System.String,System.Single)">
            <summary>
            Adds an attribute interaction to this attribute.
            </summary>
            <param name='tag'>
            Tag of the other related attribute.
            </param>
            <param name='multiplier'>
            The amoubt that will be multiplied with the value of the related attribute on calculation.
            </param>
        </member>
        <member name="M:Quark.Attributes.Attribute.SetInteractions(Quark.Interaction)">
            <summary>
            Sets the interactions of this Attribute.
            </summary>
            <param name="interaction">Interactions to set to.</param>
        </member>
        <member name="P:Quark.Attributes.Attribute.Owner">
            <summary>
            Gets the owner of this attribute.
            </summary>
            <value>The owner.</value>
        </member>
        <member name="P:Quark.Attributes.Attribute.Interactions">
            <summary>
            Gets the interactions.
            </summary>
            <value>
            The interactions.
            </value>
        </member>
        <member name="P:Quark.Attributes.Attribute.Name">
            <summary>
            Gets the name of this attribute.
            </summary>
            <value>
            The name of this attribute.
            </value>
        </member>
        <member name="P:Quark.Attributes.Attribute.Tag">
            <summary>
            Gets the tag of this attribute.
            </summary>
            <value>
            The tag of this attribute.
            </value>
        </member>
        <member name="P:Quark.Attributes.Attribute.Value">
            <summary>
            Gets the calculated value of this attribute
            </summary>
            <value>
            The value this attribute has.
            </value>
        </member>
        <member name="P:Quark.Attributes.Attribute.Identifier">
            <summary>
            Gets the identifier of this Attribute
            </summary>
        </member>
        <member name="T:Quark.Attributes.AttributeCollection">
            <summary>
            This class is responsible for storing and managing the Attributes and Stats of Characters
            </summary>
        </member>
        <member name="M:Quark.Attributes.AttributeCollection.Add(System.String,System.String,System.Boolean)">
            <summary>
            Adds a new <see cref="T:Quark.Attributes.Attribute"/> or <see cref="T:Quark.Attributes.Stat"/> to this collection. 
            </summary>
            <param name="tag">Tag of the attribute or stat</param>
            <param name="name">Name of the attribute or stat</param>
            <param name="isStat">This flag determines whether the element is a stat or attribute</param>
        </member>
        <member name="M:Quark.Attributes.AttributeCollection.Add(System.String,System.String,Quark.Interaction,System.Boolean)">
            <summary>
            Adds a new <see cref="T:Quark.Attributes.Attribute"/> or <see cref="T:Quark.Attributes.Stat"/> with an <see cref="T:Quark.Interaction"/> to this collection. 
            </summary>
            <param name="tag">Tag of the attribute or stat</param>
            <param name="name">Name of the attribute or stat</param>
            <param name="interaction">Interaction of the new attribute or stat</param>
            <param name="isStat">This flag determines whether the element is a stat or attribute</param>
        </member>
        <member name="M:Quark.Attributes.AttributeCollection.DeepCopy">
            <summary>
            Deep copies this collection by recreating it attribute and stat -wise.
            <remarks>This function will not preserve any event listener or the current state of the states</remarks>
            </summary>
            <returns>A new collection</returns>
        </member>
        <member name="M:Quark.Attributes.AttributeCollection.SetCarrier(Quark.Character)">
            <summary>
            Sets the carrier of this attribute collection.
            <remarks>Notice this will not remove any existing event listener related with the former carrier</remarks>
            </summary>
            <param name="carrier">The new carrier</param>
        </member>
        <member name="M:Quark.Attributes.AttributeCollection.#ctor">
            <summary>
            Initializes a new AttributeCollection instance.
            </summary>
        </member>
        <member name="M:Quark.Attributes.AttributeCollection.ApplyBases(System.Collections.Generic.Dictionary{System.String,System.Single})">
            <summary>
            Sets base values of attributes and stats for this collection
            </summary>
            <param name="bases">Base values as (tag, value) pairs</param>
        </member>
        <member name="M:Quark.Attributes.AttributeCollection.GetAttributes">
            <summary>
            Gets a readonly collection of the attributes and stats in this collection 
            </summary>
            <returns>Readonly collection</returns>
        </member>
        <member name="E:Quark.Attributes.AttributeCollection.StatManipulated">
            <summary>
            This event is raised when a Stat belonging to this collection is manipulated
            </summary>
        </member>
        <member name="T:Quark.Projectiles.Projectile">
            <summary>
            Projectile class provides interface for MissileController objects to access to properties about the projectile
            It also retrieves necessary movement vector or position vector and moves the carrier object appropriately
            It is also responsible for handling the collisions and target checks
            </summary>
        </member>
        <member name="F:Quark.Projectiles.Projectile.NearEnough">
            <summary>
            The near enough distance constant which indicates that a missile will consider itself reached to a target point.
            </summary>
        </member>
        <member name="F:Quark.Projectiles.Projectile.CastRotation">
            <summary>
            Rotation of the caster Character when the projectile stage began.
            </summary>
        </member>
        <member name="F:Quark.Projectiles.Projectile.TargetOffset">
            <summary>
            This field stores the Y axis (ie. height) offset to properly hit the target in a proper point.
            </summary>
        </member>
        <member name="M:Quark.Projectiles.Projectile.Make(UnityEngine.GameObject,Quark.Projectiles.ProjectileController,Quark.Spells.Cast,Quark.TargetUnion)">
            <summary>
            This function creates a new projectile object from a prefab and a controller in a context towards a target.
            
            The created projectile will immediately start travelling towars its target.
            </summary>
            <param name="prefab">The prefab of a Projectile. The prefab shouldn't contain a Projectile component.</param>
            <param name="controller">A controller object to control the Projectile instance.</param>
            <param name="context">Context to create the Projectile instance in.</param>
            <param name="target">Target of the Projectile instance.</param>
            <returns>The new Projectile instance.</returns>
        </member>
        <member name="P:Quark.Projectiles.Projectile.Controller">
            <summary>
            The Controller of this projectile object.
            </summary>
        </member>
        <member name="P:Quark.Projectiles.Projectile.Context">
            <summary>
            The context this Projectile travels in.
            </summary>
        </member>
        <member name="P:Quark.Projectiles.Projectile.InitialPosition">
            <summary>
            Gets the initial position for this missile.
            </summary>
            <value>The initial position.</value>
        </member>
        <member name="P:Quark.Projectiles.Projectile.Target">
            <summary>
            Current target point of this Projectile instance.
            
            <remarks>The target may change.</remarks>
            </summary>
        </member>
        <member name="P:Quark.Projectiles.Projectile.InitialTime">
            <summary>
            The time in seconds that this Projectile instance was created.
            </summary>
        </member>
        <member name="M:Quark.Projectiles.ProjectileController.CalculateInitial(Quark.TargetUnion,Quark.Spells.Cast)">
            <summary>
            This method should calculate the initial position of the Projectile object.
            </summary>
            <param name="target">Target of the Projectile.</param>
            <param name="context">Context to calculate in.</param>
            <returns>Initial position of Projectile.</returns>
        </member>
        <member name="M:Quark.Projectiles.ProjectileController.Control">
            <summary>
            This method controls the projectile object.
            
            There are primarily 2 ways of controlling a projectile:
                
                - Calculating the change of position every frame.
                - Calculating the absolute position every frame.
            
            This method gets the appropriate property and updates the position of the Projectile by default.
            </summary>
        </member>
        <member name="M:Quark.Projectiles.ProjectileController.HasReached">
            <summary>
            This method determines whether the projectile arrived it its destination,
            and is ready for destruction.
            </summary>
            <returns>Whether the projectile should be destroyed.</returns>
        </member>
        <member name="M:Quark.Projectiles.ProjectileController.Set(Quark.Projectiles.Projectile)">
            <summary>
            Set the Projectile object of this ProjectileController.
            </summary>
            <param name="obj">The Projectile object.</param>
        </member>
        <member name="M:Quark.Projectiles.ProjectileController.ValidateHit(Quark.Targetable)">
            <summary>
            This method should determine whether a hit to a Targetable object is valid or not.
            </summary>
            <param name="target">The hit object.</param>
            <returns>Whether the hit is valid or not.</returns>
        </member>
        <member name="M:Quark.Projectiles.ProjectileController.ChangeTarget(Quark.TargetUnion)">
            <summary>
            This method changes the target of this Controller instance and the Projectile that's bound with it.
            </summary>
            <param name="target">The new target.</param>
        </member>
        <member name="P:Quark.Projectiles.ProjectileController.Type">
            <summary>
            Gets the position update type for the missile
            </summary>
            <value>Update type.</value>
        </member>
        <member name="P:Quark.Projectiles.ProjectileController.Projectile">
            <summary>
            The Projectile component this controller belongs to.
            </summary>
        </member>
        <member name="P:Quark.Projectiles.ProjectileController.Movement">
            <summary>
            Calculates the change in the position of the projectile in this frame.
            </summary>
            <value>The movement vector.</value>
        </member>
        <member name="P:Quark.Projectiles.ProjectileController.Position">
            <summary>
            Calculates the absolute position of the projectile in this frame.
            </summary>
            <value>The absolute position, relative to the starting point.</value>
        </member>
        <member name="P:Quark.Projectiles.ProjectileController.CurrentPosition">
            <summary>
            Gets current projectile position
            </summary>
            <value>Current position.</value>
        </member>
        <member name="P:Quark.Projectiles.ProjectileController.TargetPoint">
            <summary>
            Gets the target position of the projectile.
            </summary>
            <value>The target.</value>
        </member>
        <member name="P:Quark.Projectiles.ProjectileController.Target">
            <summary>
            Target of this Controller.
            </summary>
        </member>
        <member name="P:Quark.Projectiles.ProjectileController.InitialPosition">
            <summary>
            Gets the initial position of the projectile.
            </summary>
            <value>The initial position.</value>
        </member>
        <member name="P:Quark.Projectiles.ProjectileController.AliveSeconds">
            <summary>
            Gets the time in seconds since the projectile was created.
            </summary>
            <value>The alive.</value>
        </member>
        <member name="P:Quark.Projectiles.ProjectileController.TravelAmount">
            <summary>
            Gets the distance from the beginning position to the current projectile position.
            </summary>
            <value>The distance.</value>
        </member>
        <member name="P:Quark.Projectiles.ProjectileController.Context">
            <summary>
            The context this ProjectileController works in.
            </summary>
        </member>
        <member name="T:Quark.Projectiles.ControlType">
            <summary>
            This enumeration represents how a ProjectileController calculates motion of a Projectile.
            </summary>
        </member>
        <member name="F:Quark.Projectiles.ControlType.Movement">
            <summary>
            Projectile calculates change from the previous position of the Projectile every frame.
            </summary>
        </member>
        <member name="F:Quark.Projectiles.ControlType.Absolute">
            <summary>
            Projectile calculates absolute position relative to the beginning position.
            </summary>
        </member>
        <member name="F:Quark.Buffs.Buff.Interval">
            <summary>
            This field stores the interval of calling the Tick method in seconds.
            </summary>
        </member>
        <member name="F:Quark.Buffs.Buff.Duration">
            <summary>
            This field stores the total duration of this Buff instance.
            </summary>
        </member>
        <member name="F:Quark.Buffs.Buff.Continuous">
            <summary>
            This flag determines whether the Tick method should be called every frame or not.
            </summary>
        </member>
        <member name="F:Quark.Buffs.Buff.TicksWhileSuspended">
            <summary>
            This flag determines whether this Buff ticks while its Possessor Character is suspended or not.
            </summary>
        </member>
        <member name="F:Quark.Buffs.Buff.MaxStacks">
            <summary>
            This field stores the maximum stack count of this Buff.
            </summary>
        </member>
        <member name="F:Quark.Buffs.Buff.CurrentStacks">
            <summary>
            This field stores the current stack count of this Buff.
            </summary>
        </member>
        <member name="F:Quark.Buffs.Buff.StackBehavior">
            <summary>
            This field stores the stacking behavior of this Buff.
            See <see cref="T:Quark.Buffs.StackBehavior"/>
            </summary>
        </member>
        <member name="M:Quark.Buffs.Buff.MakeID(Quark.Buffs.Buff,Quark.Spells.Cast)">
            <summary>
            Makes an Identifier from a Buff and Cast instances
            </summary>
            <param name="buff">The Buff instance</param>
            <param name="context">The Cast instance</param>
            <returns>Buff identifier</returns>
        </member>
        <member name="M:Quark.Buffs.Buff.MakeID(Quark.Buffs.Buff,System.String)">
            <summary>
            Makes an Identifier from a Buff and an identifier for a Cast context
            </summary>
            <param name="buff">The Buff instance</param>
            <param name="contextID">A context identifier</param>
            <returns>Buff identifier</returns>
        </member>
        <member name="M:Quark.Buffs.Buff.SetContext(Quark.Spells.Cast)">
            <summary>
            Sets the Cast context where this Buff runs in
            </summary>
            <param name="context">The Cast context</param>
        </member>
        <member name="F:Quark.Buffs.Buff._posessionTime">
            <summary>
            This variable is stored for calculating the alive time of the Buff instances
            </summary>
        </member>
        <member name="F:Quark.Buffs.Buff._lastTick">
            <summary>
            This variable is stored for checking whether the Tick method should be called or not in a given frame
            </summary>
        </member>
        <member name="F:Quark.Buffs.Buff._terminated">
            <summary>
            This flag stores whether this Buff got terminated in the last Tick
            </summary>
        </member>
        <member name="M:Quark.Buffs.Buff.Terminate">
            <summary>
            Immediately terminates this Buff.
            Termination assures no other Tick will take place in this instance.
            </summary>
        </member>
        <member name="M:Quark.Buffs.Buff.ResetBeginning">
            <summary>
            Resets the possession time of this Buff, practically resetting its lifetime
            </summary>
        </member>
        <member name="M:Quark.Buffs.Buff.Tick">
            <summary>
            This function controls the state of the buff for whether it should call the OnTick function in this frame or not and also it checks if it has completed its lifespan or not
            </summary>
        </member>
        <member name="M:Quark.Buffs.Buff.ShouldDispose">
            <summary>
            This method determines whether this Buff instance should get disposed in the current frame.
            </summary>
            <returns>Whether this buff should get disposed.</returns>
        </member>
        <member name="M:Quark.Buffs.Buff.Register">
            <summary>
            Register proper events to the Messenger.
            This method should <b>not</b> contain any gameplay related logic
            Refer to the <c>OnPossess()</c> for gameplay logic on possession
            </summary>
        </member>
        <member name="M:Quark.Buffs.Buff.Deregister">
            <summary>
            Deregister pre registered events from the messenger.
            </summary>
        </member>
        <member name="M:Quark.Buffs.Buff.Possess(Quark.Character)">
            <summary>
            Begin the posession logic of this Buff
            </summary>
            <param name="possessor"></param>
        </member>
        <member name="M:Quark.Buffs.Buff.OnPossess">
            <summary>
            This event handler is called right after the owning <c>BuffContainer</c> possesses this buff
            </summary>
        </member>
        <member name="M:Quark.Buffs.Buff.OnStack">
            <summary>
            This event is raised when an existing Buff is attached again
            </summary>
        </member>
        <member name="M:Quark.Buffs.Buff.OnTick">
            <summary>
            Handles the tick event
            </summary>
        </member>
        <member name="M:Quark.Buffs.Buff.OnDone">
            <summary>
            Executes the finalization logic of this buff
            </summary>
        </member>
        <member name="M:Quark.Buffs.Buff.OnTerminate">
            <summary>
            Executes the termination logic of this buff
            </summary>
        </member>
        <member name="M:Quark.Buffs.Buff.IsTagged(System.String)">
            <summary>
            Checks whether this Buff is tagged with the given string or not.
            </summary>
            <param name="tag">Tag to check.</param>
            <returns>Whether the buff is tagged.</returns>
        </member>
        <member name="P:Quark.Buffs.Buff.Name">
            <summary>
            Name of this Buff.
            </summary>
        </member>
        <member name="P:Quark.Buffs.Buff.Hidden">
            <summary>
            This field determines whether this Buff should be hidden or not.
            </summary>
        </member>
        <member name="P:Quark.Buffs.Buff.Possessor">
            <summary>
            This property stores the possessor of this Buff instance.
            </summary>
        </member>
        <member name="P:Quark.Buffs.Buff.Context">
            <summary>
            The context this Buff resides in.
            </summary>
        </member>
        <member name="P:Quark.Buffs.Buff.Identifier">
            <summary>
            Returns this Buffs identifier
            </summary>
        </member>
        <member name="P:Quark.Buffs.Buff.LifeRatio">
            <summary>
            This ratio indicates the rate of its alive time to its total duration 
            </summary>
        </member>
        <member name="P:Quark.Buffs.Buff.Alive">
            <summary>
            The time span in seconds where this Buff was running 
            </summary>
        </member>
        <member name="P:Quark.Buffs.Buff.CleanedUp">
            <summary>
            This flag stores whether this Buff is ready to be garbage collected
            </summary>
        </member>
        <member name="P:Quark.Buffs.Buff.PossessEffects">
            <summary>
            These effects are applied when this Buff is first possessed
            </summary>
        </member>
        <member name="P:Quark.Buffs.Buff.StackEffects">
            <summary>
            These effects are applied when another instance of this Buff is attached to the possessor
            </summary>
        </member>
        <member name="P:Quark.Buffs.Buff.TickEffects">
            <summary>
            These effects are applied on every interval
            </summary>
        </member>
        <member name="P:Quark.Buffs.Buff.DoneEffects">
            <summary>
            These effects are applied when this Buff finishes its life time successfully
            </summary>
        </member>
        <member name="P:Quark.Buffs.Buff.TerminateEffects">
            <summary>
            These effeccts are applied when this Buff terminates (fails finish its life time)
            </summary>
        </member>
        <member name="P:Quark.Buffs.Buff.DoneConditions">
            <summary>
            These conditions are checked to determine whether this Buff should be done
            </summary>
        </member>
        <member name="P:Quark.Buffs.Buff.TerminateConditions">
            <summary>
            These conditions are checked to determine whether this Buff should terminate
            </summary>
        </member>
        <member name="P:Quark.Buffs.Buff.Tags">
            <summary>
            Stores the static tags of this buff.
            </summary>
        </member>
        <member name="T:Quark.Buffs.StackBehavior">
            <summary>
            This enumeration dictates how a given Buff should respond in a stacking situation
            </summary>
        </member>
        <member name="F:Quark.Buffs.StackBehavior.ResetBeginning">
            <summary>
            In the case of stacking, the Buff should reset its possession time.
            <see cref="M:Quark.Buffs.Buff.ResetBeginning"/>
            </summary>
        </member>
        <member name="F:Quark.Buffs.StackBehavior.IncreaseStacks">
            <summary>
            In the case of stacking, the Buff should increase its stack count.
            </summary>
        </member>
        <member name="F:Quark.Buffs.StackBehavior.Nothing">
            <summary>
            In the case of stacking, the Buff shouldn't respond.
            </summary>
        </member>
        <member name="M:Quark.Buffs.BuffContainer.GetBuff(Quark.Buffs.Buff)">
            <summary>
            This method finds the given Buff in this container by its Identifier.
            </summary>
            <param name="buff">Buff to find by Identifier.</param>
            <returns>Buff instance in the container.</returns>
        </member>
        <member name="E:Quark.Buffs.BuffContainer.BuffDetached">
            <summary>
            This event is raised whenever a Buff was detached from this container.
            </summary>
        </member>
        <member name="M:Quark.Spells.Spell.MakeID(Quark.Spells.Spell,Quark.Spells.Cast)">
            <summary>
            Generates an identifier for a given Spell in a given Context.
            </summary>
            <param name="spell">The Spell</param>
            <param name="context">The Context</param>
            <returns>Identifier</returns>
        </member>
        <member name="M:Quark.Spells.Spell.MakeID(Quark.Spells.Spell,Quark.Character)">
            <summary>
            Generates an identifier for a given Spell casted by a given Character.
            </summary>
            <param name="spell">The Spell</param>
            <param name="caster">The Caster</param>
            <returns>Identifier</returns>
        </member>
        <member name="M:Quark.Spells.Spell.SetContext(Quark.Spells.Cast)">
            <summary>
            Introduce the Cast context which is invoking this Spell instance.
            </summary>
            <param name="context">The Cast</param>
        </member>
        <member name="M:Quark.Spells.Spell.CanInvoke">
            <summary>
            This method determines whether this Spell can be casted in the current Context.
            </summary>
            <returns>Whether this Spell can be casted.</returns>
        </member>
        <member name="M:Quark.Spells.Spell.OnInvoke">
            <summary>
            Executes the spell cast beginning logic of this Spell without a target.
            </summary>
        </member>
        <member name="M:Quark.Spells.Spell.OnTargetingDone">
            <summary>
            Executes the Targeting Done logic of this Spell on every possible target.
            </summary>
        </member>
        <member name="M:Quark.Spells.Spell.OnCastingBegan">
            <summary>
            Executes the Casting Begin logic of this Spell without a target.
            </summary>
        </member>
        <member name="M:Quark.Spells.Spell.OnCasting">
            <summary>
            Executes the Casting logic of this Spell without a target.
            <remarks>This method is called every frame while casting.</remarks>
            </summary>
        </member>
        <member name="M:Quark.Spells.Spell.OnCastDone">
            <summary>
            Executes the Casting Done logic of this Spell on every possible target.
            </summary>
        </member>
        <member name="M:Quark.Spells.Spell.OnInterrupt">
            <summary>
            Executes the Interruption logic of this Spell without a target.
            </summary>
        </member>
        <member name="M:Quark.Spells.Spell.OnTravel(UnityEngine.Vector3)">
            <summary>
            Executes the Travel logic on thge position of the projectile this stage was triggered from. 
            </summary>
            <param name="position">Target of the hit.</param>
        </member>
        <member name="M:Quark.Spells.Spell.OnHit(UnityEngine.Vector3)">
            <summary>
            Executes the Hit logic on the given point for this Spell.
            </summary>
            <param name="position">Target of the hit.</param>>
        </member>
        <member name="M:Quark.Spells.Spell.OnHit(Quark.Character)">
            <summary>
            Executes the Hit logic on the given Character for this Spell.
            </summary>
            <param name="character">Target of the hit.</param>>
        </member>
        <member name="M:Quark.Spells.Spell.OnHit(Quark.Targetable)">
            <summary>
            Executes the Hit logic on the given Targetable for this Spell.
            </summary>
            <param name="targetable">Target of the hit.</param>
        </member>
        <member name="M:Quark.Spells.Spell.OnMiss">
            <summary>
            Executes the Miss logic for this Spell.
            </summary>
        </member>
        <member name="M:Quark.Spells.Spell.OnFinal">
            <summary>
            Executes the ClearEffects then purges itself from the Cast context it is associated with
            </summary>
        </member>
        <member name="M:Quark.Spells.Spell.CollectProjectile(Quark.Projectiles.Projectile)">
            <summary>
            Collects a projectile which were created by this spell
            </summary>
            <param name="projectile">Projectile to collect.</param>
        </member>
        <member name="F:Quark.Spells.Spell._onAirMissileCount">
            <summary>
            This field stores the current travelling missiles originating from this Spell.
            </summary>
        </member>
        <member name="M:Quark.Spells.Spell.CreateProjectiles">
            <summary>
            Invokes necessary projectiles for this spell
            </summary>
        </member>
        <member name="M:Quark.Spells.Spell.IsTagged(System.String)">
            <summary>
            This method determines whether this Spell is tagged with a certain string or not.
            </summary>
            <param name="tag">The string to check.</param>
            <returns>Whether this spell is tagged or not.</returns>
        </member>
        <member name="P:Quark.Spells.Spell.CastDuration">
            <summary>
            Gets or Sets the duration of the cast.
            </summary>
            <value>
            The duration of the cast.
            </value>
        </member>
        <member name="P:Quark.Spells.Spell.CastingInterval">
            <summary>
            This field determines the interval of the OnCasting logic to run while this Spell is being casted.
            </summary>
            <value>
            Interval in seconds.
            </value>
        </member>
        <member name="P:Quark.Spells.Spell.TravelingInterval">
            <summary>
            This field determines the interval of the OnTravel logic to run while a projectile belonging to this Spell is   traveling.
            </summary>
            <value>
            Interval in distance units.
            </value> 
        </member>
        <member name="P:Quark.Spells.Spell.Name">
            <summary>
            Name of the Spell
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Quark.Spells.Spell.Identifier">
            <summary>
            Identifier of this Spell
            </summary>
        </member>
        <member name="P:Quark.Spells.Spell.TargetForm">
            <summary>
            Gets the target form of this spell
            </summary>
            <value>The target form.</value>
        </member>
        <member name="P:Quark.Spells.Spell.TargetMacro">
            <summary>
            Gets the target macro of this Spell
            </summary>
            <value>The target macro.</value>
        </member>
        <member name="P:Quark.Spells.Spell.ProjectileObject">
            <summary>
            This property stores the GameObject for the projectiles of this Spell.
            If this property returns null, the Projectile stage of this Spell will be skipped.
            Necessary components will be added by Quark upon instantiation on the projectiles.
            </summary>
        </member>
        <member name="P:Quark.Spells.Spell.Controller">
            <summary>
            This property stores the ProjectileController for the projectiles of this Spell.
            </summary>
        </member>
        <member name="P:Quark.Spells.Spell.IsInstant">
            <summary>
            Gets a value indicating whether this spell is instant.
            </summary>
            <value><c>true</c> if this spell is instant; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Quark.Spells.Spell.IsProjectiled">
            <summary>
            Gets a value indicating whether this spell invokes projectiles.
            </summary>
            <value><c>true</c> if this instance has projectiles; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Quark.Spells.Spell.Context">
            <summary>
            The context this Spell instance resides in.
            </summary>
        </member>
        <member name="P:Quark.Spells.Spell.InvokeCondition">
            <summary>
            The invoke conditions.
            Conditions in this collection are checked to determine whether this Spell can be casted.
            
            Possible Targets:
                + Caster Character 
            
            </summary>
        </member>
        <member name="P:Quark.Spells.Spell.InvokeEffects">
            <summary>
            The begin effects.
            Effects within this list are applied with the caster Character object argument when the castdata is initialized
            
            Possible Targets:
                + Void
            
            </summary>
        </member>
        <member name="P:Quark.Spells.Spell.TargetingDoneEffects">
            <summary>
            The targeting done effects.
            Effects within this list are applied with each of the target Character objects and Vector objects, depending on the type of the spell
            
            Possible Targets:
                + Target Characters
                + Target Targetables
                + Target Points
                + Void
            
            </summary>
        </member>
        <member name="P:Quark.Spells.Spell.CastingBeginEffects">
            <summary>
            The casting began effects
            Effects within this list are applied after targeting done and casting began, these effects are not executed for instant spells
            
            Possible Targets:
                + Void
            
            </summary>
        </member>
        <member name="P:Quark.Spells.Spell.CastingEffects">
            <summary>
            The casting effects
            Effects within this list are applied while the casting occurs
            
            Possible Targets:
                + Void
            
            </summary>
        </member>
        <member name="P:Quark.Spells.Spell.CastDoneEffects">
            <summary>
            The casting done effects
            Effects within this list are applied when the casting successfully finishe
            
            Possible Targets:
                + Target Characters
                + Target Targetables
                + Target Points
                + Void
            
            </summary>
        </member>
        <member name="P:Quark.Spells.Spell.InterruptEffects">
            <summary>
            The interruption effects
            Effects within this list are applied if the spell gets interrupted either by the caster or other Character
            
            Possible Targets:
                + Void
            
            </summary>
        </member>
        <member name="P:Quark.Spells.Spell.TravelEffects">
            <summary>
            The traveling effects
            Effects within this list are applied while the projectiles of this Spell are traveling
            
            Possible Targets:
                + Points the projectiles pass from while travelling.
                  
            </summary>
        </member>
        <member name="P:Quark.Spells.Spell.HitEffects">
            <summary>
            The on-hit effects
            Effects within this list are applied when a successful hit occurs.
            
            Possible Targets:
                + Target Characters
                + Target Targetables
                + Target Points
                + Void
            
            </summary>
        </member>
        <member name="P:Quark.Spells.Spell.MissEffects">
            <summary>
            The spell miss effects
            Effects within this list are applied when a projectile gets destroyed without hitting any characters.
            
            Possible Targets:
                + Void
            
            </summary>
        </member>
        <member name="P:Quark.Spells.Spell.ClearEffects">
            <summary>
            The finalizing effects
            Effects within this list are applied just before the spell gets collected by the GC.
            
            Possible Targets:
                + Void
            
            </summary>
        </member>
        <member name="P:Quark.Spells.Spell.Tags">
            <summary>
            This property stores the static tags of this Spell.
            </summary>
        </member>
        <member name="F:Quark.Spells.Cast.HitCount">
            <summary>
            The total hit count in this context.
            </summary>
        </member>
        <member name="M:Quark.Spells.Cast.PrepareCast(Quark.Character,Quark.Spells.Spell)">
            <summary>
            Prepares a new instance of <see cref="T:Quark.Spells.Cast"/> with the specified caster and spell.
            </summary>
            <returns>
            A began CastData object.
            </returns>
            <param name="caster">
            Caster Character.
            </param>
            <param name="spell">
            The instance of the spell to be cast.
            </param>
        </member>
        <member name="M:Quark.Spells.Cast.Invoke">
            <summary>
            Begin the casting logic.
            </summary>
        </member>
        <member name="M:Quark.Spells.Cast.BeginTargeting">
            <summary>
            Begin targeting logic
            </summary>
        </member>
        <member name="M:Quark.Spells.Cast.TargetingFail(Quark.Targeting.TargetingError)">
            <summary>
            Notice this context for an error in targeting.
            </summary>
            <param name="error">The reason of the error.</param>
        </member>
        <member name="M:Quark.Spells.Cast.TargetingDone(Quark.TargetCollection)">
            <summary>
            BeginTargeting done logic.
            </summary>
        </member>
        <member name="F:Quark.Spells.Cast._interrupted">
            <summary>
            This flag stores whether the current Cast instance has been interrupted or not
            </summary>
        </member>
        <member name="F:Quark.Spells.Cast._lastCast">
            <summary>
            This field stores the last time the Casting logic of the spell being casted was executed
            </summary>
        </member>
        <member name="M:Quark.Spells.Cast.Interrupt">
            <summary>
            Interrupt this Cast instance.
            </summary>
        </member>
        <member name="M:Quark.Spells.Cast.Clear(Quark.Spells.Stages)">
            <summary>
            Clears this contexts internal references.
            </summary>
            <param name="step">Stage to go after clearing.</param>
        </member>
        <member name="P:Quark.Spells.Cast.NonSpell">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Quark.Spells.Cast"/> context is Item sourced.
            </summary>
            <value><c>true</c> if non Spell; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Quark.Spells.Cast.Caster">
            <summary>
            Gets the caster.
            </summary>
            <value>
            The caster of the spell.
            </value>
        </member>
        <member name="P:Quark.Spells.Cast.CastTime">
            <summary>
            Gets the cast time.
            </summary>
            <value>
            The time past since the beginning of the cast.
            </value>
        </member>
        <member name="P:Quark.Spells.Cast.CastPercentage">
            <summary>
            Gets the cast percentage.
            </summary>
            <value>
            The cast done percentage.
            </value>
        </member>
        <member name="T:Quark.Spells.Stages">
            <summary>
            This enumeration represents the stages of a cast.
            </summary>
        </member>
        <member name="F:Quark.Spells.Stages.Null">
            <summary>
            Null stage.
            </summary>
        </member>
        <member name="F:Quark.Spells.Stages.Invoke">
            <summary>
            Configuration stage.
            </summary>
        </member>
        <member name="F:Quark.Spells.Stages.Targeting">
            <summary>
            Targeting stage.
            </summary>
        </member>
        <member name="F:Quark.Spells.Stages.Casting">
            <summary>
            Casting stage.
            </summary>
        </member>
        <member name="F:Quark.Spells.Stages.Done">
            <summary>
            Cast has successfully finalized.
            </summary>
        </member>
        <member name="F:Quark.Spells.Stages.Failed">
            <summary>
            Cast has failed.
            </summary>
        </member>
        <member name="T:Quark.ItemCollection">
            TODO: let items carry other items in form of a bag
        </member>
        <member name="M:Quark.ItemCollection.#ctor(Quark.Character,System.Int32)">
            <summary>
            Initialize a new item container
            </summary>
        </member>
        <member name="M:Quark.ItemCollection.Add(Quark.Item)">
            <summary>
            Add a new item to this container
            </summary>
            <param name="item">The item to be added</param>
        </member>
        <member name="M:Quark.Condition.Check">
            <summary>
            Checks whether a condition is met in the context
            </summary>
        </member>
        <member name="M:Quark.Condition.Check(UnityEngine.Vector3)">
            <summary>
            Check whether a condition is met in the context with the specified point.
            </summary>
            <param name="point">The Point.</param>
        </member>
        <member name="M:Quark.Condition.Check(Quark.Character)">
            <summary>
            Check whether a condition is met in the context with the specified character.
            </summary>
            <param name="character">The Character.</param>
        </member>
        <member name="M:Quark.Condition.Check(Quark.Targetable)">
            <summary>
            Check whether a condition is met in the context with the specified target.
            </summary>
            <param name="target">The Targetable.</param>
        </member>
        <member name="M:Quark.ConditionCollection.#ctor">
            <summary>
            Initialize a new condition collection
            </summary>
        </member>
        <member name="M:Quark.ConditionCollection.Add(Quark.Condition)">
            <summary>
            Add a new condition to this collection
            </summary>
            <param name="condition">The condition to be added</param>
        </member>
        <member name="M:Quark.Effect.SetContext(Quark.Spells.Cast)">
            <summary>
            Sets the context of this Effect.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Quark.Effect.Apply">
            <summary>
            Applies this effect without a target.
            </summary>
        </member>
        <member name="M:Quark.Effect.Apply(Quark.Character)">
            <summary>
            Applies this effect on the specified target Character.
            </summary>
            <param name='target'>
            Target Character.
            </param>
        </member>
        <member name="M:Quark.Effect.Apply(UnityEngine.Vector3)">
            <summary>
            Applies this effect on the specified target Vector3.
            </summary>
            <param name='point'>  
            Target Point.
            </param>
        </member>
        <member name="M:Quark.Effect.Apply(Quark.Targetable)">
            <summary>
            Applies this effect on the specified non character targetable
            </summary>
            <param name="target">Targetable.</param>
        </member>
        <member name="M:Quark.Effect.IsTagged(System.String)">
            <summary>
            Checks whether this Effect is tagged with a particular string or not.
            </summary>
            <param name="tag">The string to check.</param>
            <returns>Whether this Effect is tagged or not.</returns>
        </member>
        <member name="P:Quark.Effect.Context">
            <summary>
            The context this Effect should apply in.
            </summary>
        </member>
        <member name="P:Quark.Effect.Tags">
            <summary>
            The tags of this Effect.
            </summary>
        </member>
        <member name="T:Quark.EffectCollection">
            <summary>
            This class is designed for containing, mutating and running some effects
            It is useful for storing event handling effects
            The family of Run functions return the instance itself so the running of the effects on multiple target types can be serialized like:
            Container.Run().Run(character).Run(point)... etc.
            </summary>
        </member>
        <member name="M:Quark.EffectCollection.#ctor">
            <summary>
            Initialize a new effect collection
            </summary>
        </member>
        <member name="M:Quark.EffectCollection.Add(Quark.Effect)">
            <summary>
            Add a new effect to this collection
            </summary>
            <param name="effect">The effect to be added</param>
        </member>
        <member name="M:Quark.EffectCollection.AddRange(Quark.EffectCollection)">
            <summary>
            Add multiple effects from another collection.
            </summary>
            <param name="range">Other collection.</param>
        </member>
        <member name="M:Quark.EffectCollection.Run(Quark.Spells.Cast)">
            <summary>
            Run the effects contained in this collection with no target
            </summary>
            <param name="context">The Cast context for the Effects to run</param>
            <returns>This collection itself</returns>
        </member>
        <member name="M:Quark.EffectCollection.Run(UnityEngine.Vector3,Quark.Spells.Cast)">
            <summary>
            Apply the effects contained in this collection with a single Point target
            </summary>
            <param name="target">The target vector</param>
            <param name="context">The Cast context for the Effects to run</param>
            <returns>This collection itself</returns>
        </member>
        <member name="M:Quark.EffectCollection.Run(Quark.Character,Quark.Spells.Cast)">
            <summary>
            Apply the effects contained in this collection with a single Character target
            </summary>
            <param name="target">The target character</param>
            <param name="context">The Cast context for the Effects to run</param>
            <returns>This collection itself</returns>
        </member>
        <member name="M:Quark.EffectCollection.Run(Quark.Targetable,Quark.Spells.Cast)">
            <summary>
            Apply the effects contained in this collection with a single Targetable target
            </summary>
            <param name="target">The target targetable</param>
            <param name="context">The Cast context for the Effects to run</param>
            <returns>This collection itself</returns>
        </member>
        <member name="M:Quark.EffectCollection.Run(UnityEngine.Vector3[],Quark.Spells.Cast)">
            <summary>
            Apply the effects contained in this collection with a collection of Point targets
            </summary>
            <param name="targets">The target vectors</param>
            <param name="context">The Cast context for the Effects to run</param>
            <returns>This collection itself</returns>
        </member>
        <member name="M:Quark.EffectCollection.Run(Quark.Character[],Quark.Spells.Cast)">
            <summary>
            Apply the effects contained in this collection with a collection of Character targets
            </summary>
            <param name="targets">The target characters</param>
            <param name="context">The Cast context for the Effects to run</param>
            <returns>This collection itself</returns>
        </member>
        <member name="M:Quark.EffectCollection.Run(Quark.Targetable[],Quark.Spells.Cast)">
            <summary>
            Apply the effects contained in this collection with a collection of Targetable targets
            </summary>
            <param name="targets">The target targetables</param>
            <param name="context">The Cast context for the Effects to run</param>
            <returns>This collection itself</returns>
        </member>
        <member name="M:Quark.EffectCollection.Run(Quark.TargetCollection,Quark.Spells.Cast)">
            <summary>
            Apply the effects contained in this collection with a collection of targets
            </summary>
            <param name="targets">The targets</param>
            <param name="context">The Cast context for the Effects to run</param>
            <returns>This collection itself</returns>
        </member>
        <member name="M:Quark.EffectCollection.op_Addition(Quark.EffectCollection,Quark.EffectCollection)">
            <summary>
            This operator adds 2 EffectCollection instances by adding the Effects in the right hand side operand to the left hand side operand.
            </summary>
            <param name="lhs">Collection to add to.</param>
            <param name="rhs">Collection to add from.</param>
            <returns>The left hand side collection.</returns>
        </member>
        <member name="P:Quark.EffectCollection.Count">
            <summary>
            The count of the Effects in this collection.
            </summary>
        </member>
        <member name="T:Quark.TargetUnion">
            <summary>
            This structure is the generic target type used in Quark framework.
            </summary>
        </member>
        <member name="M:Quark.TargetUnion.#ctor(UnityEngine.Vector3)">
            <summary>
            Initializes a TargetUnion instance with a point target.
            </summary>
            <param name="point">Target point.</param>
        </member>
        <member name="M:Quark.TargetUnion.#ctor(Quark.Character)">
            <summary>
            Initializes a TargetUnion instance with a character target.
            </summary>
            <param name="character">Target character.</param>
        </member>
        <member name="M:Quark.TargetUnion.#ctor(Quark.Targetable)">
            <summary>
            Initializes a TargetUnion instance with a targetable target.
            </summary>
            <param name="targetable">Target targetable.</param>
        </member>
        <member name="M:Quark.TargetUnion.AsPoint">
            <summary>
            This method returns appropriate point from its target.
            </summary>
            <returns>Position of the target.</returns>
        </member>
        <member name="M:Quark.TargetUnion.AsTargetable">
            <summary>
            This method returns appropriate Targetable from its target.
            </summary>
            <returns>Targetable.</returns>
        </member>
        <member name="P:Quark.TargetUnion.Type">
            <summary>
            Type of the target of this union.
            </summary>
        </member>
        <member name="P:Quark.TargetUnion.Character">
            <summary>
            The target Character of this union.
            </summary>
        </member>
        <member name="P:Quark.TargetUnion.Targetable">
            <summary>
            The target Targetable of this union.
            </summary>
        </member>
        <member name="P:Quark.TargetUnion.Point">
            <summary>
            The target Point of this union.
            </summary>
        </member>
        <member name="M:Quark.Character.Suspend">
            <summary>
            This method suspends this Character, practically disabling it.
            </summary>
        </member>
        <member name="M:Quark.Character.Continue">
            <summary>
            This method continues this Character if it was suspended.
            </summary>
        </member>
        <member name="M:Quark.Character.Configure">
            <summary>
            Configure this Character.
            </summary>
        </member>
        <member name="M:Quark.Character.Destruction">
            <summary>
            Handle the destruction of this character
            </summary>
        </member>
        <member name="M:Quark.Character.GetAttribute(System.String)">
            <summary>
            Gets the <see cref="T:Quark.Attributes.Attribute"/> belonging to this Character with the given tag
            </summary>
            <param name="tag">Tag of the attribute</param>
            <returns>Attribute with the given tag</returns>
        </member>
        <member name="M:Quark.Character.GetStat(System.String)">
            <summary>
            Gets the <see cref="T:Quark.Attributes.Stat"/> belonging to this Character with the given tag
            </summary>
            <param name="tag">Tag of the stat</param>
            <returns>Stat with the given tag</returns>
        </member>
        <member name="M:Quark.Character.CanCast(Quark.Spells.Spell)">
            <summary>
            Determines whether the given <see cref="T:Quark.Spells.Spell"/> can be casted by this Character.
            </summary>
            <param name="spell"></param>
            <returns>Boolean representing whether this Character can cast the given Spell or not.</returns>
        </member>
        <member name="M:Quark.Character.AddCast(Quark.Spells.Cast)">
            <summary>
            Add the given <see cref="T:Quark.Spells.Cast"/> context to this character.
            </summary>
            <param name="cast">A <see cref="T:Quark.Spells.Cast"/> context.</param>
        </member>
        <member name="M:Quark.Character.ClearCast(Quark.Spells.Cast)">
            <summary>
            Removes the given <see cref="T:Quark.Spells.Cast"/> context from this character.
            </summary>
            <param name="cast"></param>
        </member>
        <member name="M:Quark.Character.GetBuff(Quark.Buffs.Buff)">
            <summary>
            If a buff with the given type exists on this Character, it will return the correct instance on the Character, otherwise it will return null.
            </summary>
            <returns>The buff instance being carried by this Character.</returns>
            <param name="buff">Example of the Buff to find. Only types should match.</param>
        </member>
        <member name="P:Quark.Character.IsSuspended">
            <summary>
            This property stores whether this Character is suspended or not.
            </summary>
        </member>
        <member name="P:Quark.Character.ConfigurationEffects">
            <summary>
            These effects are applied when this Character is instantiated.
            </summary>
        </member>
        <member name="P:Quark.Character.DestructionEffects">
            <summary>
            These effects are applied when the GameObject this Character belongs is destroyed.
            </summary>
        </member>
        <member name="P:Quark.Character.Casts">
            <summary>
            Returns a read-only collection of the casts this Character is casting
            </summary>
        </member>
        <member name="P:Quark.Character.HasCast">
            <summary>
            This property determines whether this Character is casting currently.
            </summary>
        </member>
        <member name="P:Quark.Character.Buffs">
            <summary>
            Returns a readonly collection of the Buffs being carried by this Character
            </summary>
            <value>The buffs.</value>
        </member>
        <member name="E:Quark.Character.CharacterDestroyed">
            <summary>
            This event is raised after the Character component is destroyed
            </summary>
        </member>
        <member name="E:Quark.Character.BuffAttached">
            <summary>
            This event is raised when a new Buff is attached to this Character
            </summary>
        </member>
        <member name="E:Quark.Character.BuffDetached">
            <summary>
            This event is raised when a Buff is detached from this Character 
            </summary>
        </member>
        <member name="E:Quark.Character.StatManipulated">
            <summary>
            This event is raised when a Stat of this Character is manipulated
            </summary>
        </member>
        <member name="T:Quark.QuarkConfig">
            <summary>
            This class is used for configuring a Quark game.
            It includes the base Attributes and Stats and the common interruption conditions.
            </summary>
        </member>
        <member name="T:Quark.QuarkMain">
            <summary>
            QuarkMain is the singleton object which starts the default Quark subroutines
            </summary>
        </member>
        <member name="M:Quark.QuarkMain.Initialize">
            <summary>
            This method is used for initializing this QuarkMain instance.
            </summary>
        </member>
        <member name="M:Quark.QuarkMain.Awake">
            <summary>
            This method is called from Unity right after it is instantiated.
            </summary>
        </member>
        <member name="M:Quark.QuarkMain.Update">
            <summary>
            This method is called every frame from Unity.
            We use it to broadcast the Update event.
            </summary>
        </member>
        <member name="M:Quark.QuarkMain.GetDaemon``1">
            <summary>
            Finds a daemon by its type.
            </summary>
            <typeparam name="T">Daemon type to find</typeparam>
            <returns>Active daemon. If the daemon is not present, it is null.</returns>
        </member>
        <member name="M:Quark.QuarkMain.AddDaemon(Quark.Utilities.Daemon)">
            <summary>
            Adds a new daemon to the game.
            </summary>
            <param name="daemon">Daemon to add</param>
        </member>
        <member name="M:Quark.QuarkMain.TerminateDaemon(Quark.Utilities.Daemon)">
            <summary>
            Terminates the given daemon, and removes it from the game.
            </summary>
            <param name="daemon">Daemon to remove</param>
        </member>
        <member name="F:Quark.QuarkMain._headRef">
            <summary>
            A weak reference to the singleton QuarkMain object.
            It is accessed via a weak reference so that it will be garbage collected after the GameObject it is attached to is destroyed
            </summary>
        </member>
        <member name="M:Quark.QuarkMain.GetInstance">
            <summary>
            Gets the singleton QuarkMain instance.
            </summary>
            <returns>The instance</returns>
        </member>
        <member name="P:Quark.QuarkMain.Configuration">
            <summary>
            This property stores the configuration for this game.
            </summary>
        </member>
        <member name="P:Quark.QuarkMain.IsPresent">
            <summary>
            This property determines whether a QuarkMain object is already instantiated or not.
            </summary>
        </member>
        <member name="M:Quark.Interaction.#ctor">
            <summary>
            Initialize a new effect collection
            </summary>
        </member>
        <member name="M:Quark.Interaction.Add(Quark.Attributes.AttributeModifier)">
            <summary>
            Add a new interaction to this collection.
            </summary>
            <param name="modifier">The interaction to be added</param>
        </member>
        <member name="M:Quark.Interaction.Calculate(Quark.Character)">
            <summary>
            Calculates the current value of this Interaction for a given Character
            </summary>
            <param name="of"></param>
            <returns></returns>
        </member>
        <member name="M:Quark.Interaction.DeepCopy">
            <summary>
            Deep copies this collection by recreating it attribute and stat -wise.
            <remarks>This function will not preserve any event listener or the current state of the states</remarks>
            </summary>
            <returns>A new collection</returns>
        </member>
        <member name="T:Quark.Symbol">
            <summary>
            This class is the building block of expressions.
            
            It can be an interaction, constant or other custom calculation such as another expression.
            </summary>
        </member>
        <member name="T:Quark.ConstantSymbol">
            <summary>
            This class represents only a constant value.
            </summary>
        </member>
        <member name="T:Quark.InteractionSymbol">
            <summary>
            This class represents an attribute interaction of a given source.
            
            It depends either on the caster or target depending on the source, 
            and the value it yields is the interaction result.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Quark.Expression" -->
        <member name="M:Quark.Expression.Add(System.Single)">
            <summary>
            Adds a constant symbol to this expression.
            </summary>
            <param name="constant">Constant.</param>
        </member>
        <member name="M:Quark.Expression.Add(Quark.Symbol)">
            <summary>
            Adds an arbitrary symbol to this expression.
            </summary>
            <param name="symbol">Symbol.</param>
        </member>
        <member name="M:Quark.Expression.Add(Quark.Source,System.String,System.Single)">
            <summary>
            Adds an attribute interaction to this expression.
            </summary>
            <param name="source">Source character.</param>
            <param name="tag">Attribute or stat tag.</param>
            <param name="multiplier">Multiplier.</param>
        </member>
        <member name="M:Quark.Expression.Execute(Quark.Character,Quark.Character)">
            <summary>
            Executes the expression and returns the calculated value.
            </summary>
            <param name="caster">Caster.</param>
            <param name="target">Target.</param>
        </member>
    </members>
</doc>
